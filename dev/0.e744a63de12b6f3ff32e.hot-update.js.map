{"version":3,"file":"0.e744a63de12b6f3ff32e.hot-update.js","sources":["/Users/maddie/Desktop/Work/junctionx/ext-manifest2-ff/src/components/Home/index.tsx"],"sourcesContent":["import { ChevronUpIcon, SearchIcon } from \"@chakra-ui/icons\";\nimport {\n  Button,\n  Center,\n  CircularProgress,\n  CircularProgressLabel,\n  Flex,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Text,\n} from \"@chakra-ui/react\";\nimport { isEmpty } from \"lodash\";\nimport { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAppDispatch } from \"src/hooks/useStore\";\nimport { sendMessage } from \"src/services/extension\";\nimport { setSearchKey } from \"src/store/global\";\nimport useFetch from \"use-http\";\n\nexport default function Home() {\n  const [url, setUrl] = useState<string>(\"\");\n  const [isShowDetail, setIsShowDetail] = useState<boolean>(false);\n  const [prediction, setPrediction] = useState<{\n    phishingPercentage: number;\n    result: string;\n    url: string;\n  }>({\n    phishingPercentage: 0,\n    result: \"\",\n    url: \"\",\n  });\n  const [detail, setDetail] = useState<any>();\n  const [search, setSearch] = useState<string>(\"\");\n  const history = useHistory();\n  const dispatch = useAppDispatch();\n\n  const { post: getPredict } = useFetch(\"/predict\");\n\n  const { post: getDetail } = useFetch(\"/detail\");\n\n  const getURL = useCallback(async () => {\n    const data = await sendMessage({ type: \"get_page_info\" });\n    setUrl(data.url || \"\");\n    setSearch(data.url || \"\");\n    dispatch(setSearchKey(data.url || \"\"));\n  }, [dispatch]);\n\n  const isNewTab = useMemo(() => url.includes(\"chrome://\"), [url]);\n\n  const phishingPercentage = useMemo(() => {\n    if (!prediction.phishingPercentage) return 0;\n    let result = 100 - prediction.phishingPercentage;\n    return Number(result.toFixed(0));\n  }, [prediction.phishingPercentage]);\n  console.log(prediction);\n\n  useEffect(() => {\n    getURL();\n    if (!!url) {\n      getPredict({ url }).then((res) => {\n        setPrediction(res.predictions[0]);\n      });\n    }\n  }, [getURL, getPredict, url]);\n\n  useEffect(() => {\n    if (!!url) {\n      getDetail({ url }).then((res) => {\n        console.log(res);\n        setDetail(res.detail);\n      });\n    }\n  }, [getDetail, url]);\n\n  if (isNewTab) return <Center>New tab</Center>;\n\n  return (\n    <Flex direction=\"column\">\n      <InputGroup>\n        <Input\n          background=\"#F7F7F7\"\n          value={search}\n          onChange={(e) => {\n            setSearch(e.target.value);\n            dispatch(setSearchKey(e.target.value));\n          }}\n          mx={4}\n          mt={4}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              getPredict({ url: search }).then((res) => {\n                setPrediction(res.predictions[0]);\n              });\n            }\n          }}\n          placeholder\n        />\n        <InputRightElement\n          children={<SearchIcon />}\n          mt={4}\n          mr={4}\n          onClick={() => {\n            getPredict({ url: search }).then((res) => {\n              setPrediction(res.predictions[0]);\n            });\n          }}\n          cursor=\"pointer\"\n        />\n      </InputGroup>\n      <Flex justify=\"center\" align=\"center\" my={3}>\n        <CircularProgress\n          value={phishingPercentage}\n          color={\n            phishingPercentage > 65\n              ? \"primary.200\"\n              : phishingPercentage > 45\n              ? \"orange.200\"\n              : \"red.800\"\n          }\n          size=\"135px\"\n        >\n          <CircularProgressLabel\n            fontSize=\"2xl\"\n            fontWeight=\"semibold\"\n            color={\n              phishingPercentage > 65\n                ? \"primary.200\"\n                : phishingPercentage > 45\n                ? \"orange.200\"\n                : \"red.800\"\n            }\n          >\n            {phishingPercentage}%\n          </CircularProgressLabel>\n        </CircularProgress>\n      </Flex>\n      <Center mb={3} fontWeight=\"500\">\n        {prediction.result}\n      </Center>\n      {!isNewTab && (\n        <Flex mx={4} mb={3}>\n          <Button\n            w=\"full\"\n            h=\"45px\"\n            borderRadius=\"3px\"\n            background=\"#242424\"\n            color=\"white\"\n            fontWeight=\"semibold\"\n            _hover={{ background: \"#242424\" }}\n            onClick={() => {\n              history.push(\"/report\");\n            }}\n            disabled={!url && !search}\n          >\n            Report this website\n          </Button>\n        </Flex>\n      )}\n      <Flex mx={4}>\n        <Button\n          onClick={() => setIsShowDetail((prev) => !prev)}\n          w=\"full\"\n          h=\"45px\"\n          borderRadius=\"3px\"\n          background={isShowDetail ? \"transparent\" : \"primary.200\"}\n          color={isShowDetail ? \"primary.200\" : \"white\"}\n          fontWeight=\"semibold\"\n          _hover={\n            isShowDetail\n              ? { background: \"transparent\" }\n              : { background: \"primary.200\" }\n          }\n          border=\"2px solid\"\n          borderColor=\"primary.200\"\n          _focus={{\n            boxShadow: \"none\",\n            outline: \"none\",\n          }}\n          disabled={isEmpty(detail)}\n        >\n          Details\n        </Button>\n      </Flex>\n      {isShowDetail && detail && (\n        <Flex direction=\"column\" justify=\"center\" align=\"center\" mx={2} mt={2}>\n          <Flex wrap=\"wrap\" justify=\"center\">\n            {Object.keys(detail).map((item) => (\n              <Text\n                background=\"primary.200\"\n                mx={2}\n                my={1}\n                color=\"white\"\n                py={1}\n                px={2}\n                borderRadius=\"5px\"\n                fontSize=\"sm\"\n              >\n                {item}: {detail[item]}\n              </Text>\n            ))}\n          </Flex>\n          <ChevronUpIcon\n            mt={1}\n            color=\"#979797\"\n            boxSize={5}\n            cursor=\"pointer\"\n            onClick={() => setIsShowDetail(false)}\n          />\n        </Flex>\n      )}\n    </Flex>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAnBA;AAAA;AAAA;AAAA;AAAA;AA+BA;AAAA;AAAA;AAAA;AAEA;AACA;AAOA;AATA;AAYA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAXA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AA2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAAA;AAAA;AAAA;AAAA;AA3GA;AAAA;AAAA;AAAA;AAAA;AAuIA;;;;A","sourceRoot":""}