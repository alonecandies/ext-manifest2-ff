{"version":3,"file":"0.bc5d8e7d95cf3349e45d.hot-update.js","sources":["/Users/maddie/Desktop/Work/junctionx/ext-manifest2-ff/src/components/Home/index.tsx"],"sourcesContent":["import { ChevronRightIcon } from \"@chakra-ui/icons\";\nimport { Button, Center, Flex, Input, InputGroup, InputRightElement, Text } from \"@chakra-ui/react\";\nimport { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { sendMessage } from \"src/services/extension\";\nimport useFetch from \"use-http\";\n\nexport default function Home() {\n  const [url, setUrl] = useState<string>(\"\");\n  const [isShowDetail, setIsShowDetail] = useState<boolean>(false);\n  const [prediction, setPrediction] = useState<{\n    phishingPercentage: number;\n    result: string;\n    url: string;\n  }>({\n    phishingPercentage: 0,\n    result: \"\",\n    url: \"\",\n  });\n  const [detail, setDetail] = useState<any>();\n  const [search, setSearch] = useState<string>(\"\");\n\n  const { post: getPredict } = useFetch(\"/predict\");\n\n  const { post: getDetail } = useFetch(\"/detail\");\n\n  const getURL = useCallback(async () => {\n    const data = await sendMessage({ type: \"get_page_info\" });\n    setUrl(data.url || \"\");\n  }, []);\n\n  const isNewTab = useMemo(() => url.includes(\"chrome://\"), [url]);\n\n  useEffect(() => {\n    getURL();\n    if (!!url) {\n      getPredict({ url }).then((res) => {\n        setPrediction(res.predictions[0]);\n      });\n    }\n  }, [getURL, getPredict, url]);\n\n  useEffect(() => {\n    if (!!url) {\n      getDetail({ url }).then((res) => {\n        console.log(res);\n        setDetail(res.detail);\n      });\n    }\n  }, [getDetail, url]);\n\n  if (isNewTab) return <Center>New tab</Center>;\n\n  return (\n    <Flex direction=\"column\">\n        <InputGroup>\n         <Input de />\n         <InputRightElement />\n        </InputGroup>\n      <Center>{url}</Center>\n      <Center>{prediction.result}</Center>\n      <Center>{100 - prediction.phishingPercentage}</Center>\n      {detail && (\n        <Flex justify=\"center\" align=\"center\" w=\"100%\">\n          <Button onClick={() => setIsShowDetail((prev) => !prev)}>\n            Detail <ChevronRightIcon />\n          </Button>\n        </Flex>\n      )}\n      {isShowDetail && detail && (\n        <Flex direction=\"column\" justify=\"center\" align=\"center\" w=\"100%\">\n          {Object.keys(detail).map((item) => (\n            <Text>\n              {item}: {detail[item]}\n            </Text>\n          ))}\n        </Flex>\n      )}\n    </Flex>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAhBA;AAAA;AAAA;AAAA;AAAA;AA0BA;;;;A","sourceRoot":""}