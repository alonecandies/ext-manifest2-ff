{"version":3,"file":"contentScript.bda35cf72bac3c3e8cd5.hot-update.js","sources":["/Users/maddie/Desktop/Work/junctionx/fire-phoenix/src/contentScript/index.js"],"sourcesContent":["// // If your extension doesn't need a content script, just leave this file empty\n\n// // This is an example of a script that will run on every page. This can alter pages\n// // Don't forget to change `matches` in manifest.json if you want to only change specific webpages\n\n// // This needs to be an export due to typescript implementation limitation of needing '--isolatedModules' tsconfig\n\n// import browser from \"webextension-polyfill\";\n// import { WindowPostMessageStream } from \"@metamask/post-message-stream\";\n// import PortStream from \"extension-port-stream\";\n// import pump from \"pump\";\n// import ObjectMultiplex from \"obj-multiplex\";\n\n// const CONTENT_SCRIPT = \"krystal-contentscript\";\n// const PROVIDER = \"metamask-provider\";\n// const INPAGE = \"krystal-inpage\";\n\n// export function injectScript(file_path, tag) {\n//   console.log(\"inject\");\n//   const container = document.head || document.documentElement;\n//   const scriptTag = document.createElement(\"script\");\n//   scriptTag.setAttribute(\"async\", \"false\");\n//   scriptTag.setAttribute(\"type\", \"text/javascript\");\n//   scriptTag.setAttribute(\"src\", file_path);\n//   container.insertBefore(scriptTag, container.children[0]);\n//   container.removeChild(scriptTag);\n\n//   // var node = document.getElementsByTagName(tag)[0];\n//   // var script = document.createElement(\"script\");\n//   // script.setAttribute(\"type\", \"text/javascript\");\n//   // script.setAttribute(\"src\", file_path);\n//   // node.appendChild(script);\n// }\n// /**\n//  * Sets up two-way communication streams between the\n//  * browser extension and local per-page browser context.\n//  *\n//  */\n\n// function forwardTrafficBetweenMuxes(channelName, muxA, muxB) {\n//   const channelA = muxA.createStream(channelName);\n//   const channelB = muxB.createStream(channelName);\n//   pump(channelA, channelB, channelA, (error) =>\n//     console.debug(`MetaMask: Muxed traffic for channel \"${channelName}\" failed.`, error),\n//   );\n// }\n\n// async function setupStreams() {\n//   // the transport-specific streams for communication between inpage and background\n//   const pageStream = new WindowPostMessageStream({\n//     name: CONTENT_SCRIPT,\n//     target: INPAGE,\n//   });\n\n//   const extensionPort = browser.runtime.connect({ name: CONTENT_SCRIPT });\n//   const extensionStream = new PortStream(extensionPort);\n\n//   const pageMux = new ObjectMultiplex();\n//   pageMux.setMaxListeners(25);\n//   const extensionMux = new ObjectMultiplex();\n//   extensionMux.setMaxListeners(25);\n\n//   pump(pageMux, pageStream, pageMux, (err) => console.log(err));\n\n//   pump(extensionMux, extensionStream, extensionMux, (err) => {\n//     console.log(err);\n//   });\n\n//   forwardTrafficBetweenMuxes(PROVIDER, pageMux, extensionMux);\n\n//   extensionStream.on(\"data\", (data) => {\n//     console.log(data.data)\n//   });\n\n//   // window.addEventListener(\"message\",function (event) {\n//   //     extensionPort.postMessage(event);\n//   //   },false,\n//   // );\n// }\n\n// injectScript(global.chrome.extension.getURL(\"inpage.js\"), \"body\");\n// setupStreams();\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;A","sourceRoot":""}