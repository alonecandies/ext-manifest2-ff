{"version":3,"file":"background.f007a746a25c397a89d8.hot-update.js","sources":["/Users/maddie/Desktop/Work/junctionx/fire-phoenix/src/background/bgHelper.js"],"sourcesContent":["import ObjectMultiplex from \"obj-multiplex\";\nimport pump from \"pump\";\nimport browser from \"webextension-polyfill\";\n\nexport function setupMultiplex(connectionStream) {\n  const mux = new ObjectMultiplex();\n  pump(connectionStream, mux, connectionStream, (err) => {\n    if (err) {\n      console.error(err);\n    }\n  });\n  return mux;\n}\n\nexport async function openPopup(queries, cb) {\n  let width = 400;\n  let height = 630;\n  let top = 0;\n  let left = global.screen.width - 400;\n\n  const lastFocused = await getLastFocusedWindow();\n  // Position window in top right corner of lastFocused window.\n  top = lastFocused.top;\n  left = lastFocused.left + (lastFocused.width - width);\n\n  const windowId = await browser.windows.create({\n    url: `popup.html?${queries}`,\n    type: \"popup\",\n    width,\n    height,\n    left,\n    top,\n  });\n\n  // TODO: need remove listener after the event fired.\n  browser.windows.onRemoved.addListener((id) => {\n    if (windowId.id === id && cb) {\n      cb();\n    }\n  });\n}\n\nexport function getLastFocusedWindow() {\n  return new Promise((resolve, reject) => {\n    browser.windows.getLastFocused().then((windowObject) => {\n      const error = checkForError();\n      if (error) {\n        return reject(error);\n      }\n      return resolve(windowObject);\n    });\n  });\n}\n\nexport function closeCurrentWindow() {\n  return browser.windows.getCurrent().then((windowDetails) => {\n    return browser.windows.remove(windowDetails.id);\n  });\n}\n\nexport function checkForError() {\n  const { lastError } = browser.runtime;\n  if (!lastError) {\n    return undefined;\n  }\n  // if it quacks like an Error, its an Error\n  if (lastError.stack && lastError.message) {\n    return lastError;\n  }\n  // repair incomplete error object (eg chromium v77)\n  return new Error(lastError.message);\n}\n\nexport function listenMessageFromPopup(cb) {\n  const handleMessage = async (request, sender, sendResponse) => {\n    const promise = new Promise((resolve, reject) => {\n      cb(request, sender, sendResponse, resolve, reject);\n    });\n    promise.then(() => {\n      browser.runtime.onMessage.removeListener(handleMessage);\n    });\n    return true;\n  };\n  browser.runtime.onMessage.addListener(handleMessage);\n}\n\nexport function getListTrustedApps(selectedAccount) {\n  const rootStorage = JSON.parse(localStorage.getItem(\"persist:root\") || \"{}\");\n  const trustedApps = JSON.parse(rootStorage.trustedApps || \"{}\").trustedApps || {};\n  return trustedApps[selectedAccount] || [];\n}\n\nexport function getChainIdStorage() {\n  const rootStorage = JSON.parse(localStorage.getItem(\"persist:root\") || \"{}\");\n  return JSON.parse(rootStorage.global || \"{}\").chainId || \"0x1\";\n}\n\nexport function getCurrentPageInfo(connections, origin) {\n  // eslint-disable-next-line no-undef\n  chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n    return(tabs[0].url)\n  });\n  if (!connections || !origin) {\n    return null;\n  }\n  const keyUrl = Object.keys(connections).find((url) => url === origin);\n  if (!keyUrl) {\n    return null;\n  }\n  return connections[keyUrl].page_info;\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;;;A","sourceRoot":""}