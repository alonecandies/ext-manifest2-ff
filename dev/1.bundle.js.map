{"version":3,"file":"1.bundle.js","sources":["/Users/maddie/Desktop/Work/junctionx/ext-manifest2-ff/src/components/Home/index.tsx","/Users/maddie/Desktop/Work/junctionx/ext-manifest2-ff/src/hooks/useStore.ts"],"sourcesContent":["import { ChevronUpIcon, SearchIcon } from \"@chakra-ui/icons\";\nimport {\n  Button,\n  Center,\n  CircularProgress,\n  CircularProgressLabel,\n  Flex,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Text,\n} from \"@chakra-ui/react\";\nimport { isEmpty, isNumber } from \"lodash\";\nimport { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAppDispatch } from \"src/hooks/useStore\";\nimport { sendMessage } from \"src/services/extension\";\nimport { setSearchKey } from \"src/store/global\";\nimport useFetch from \"use-http\";\n\nconst mappingCriteria = [\n  \"URL length\",\n  \"Hostname length\",\n  \"IP\",\n  \"Dots (.)\",\n  \"Exclamation (!)\",\n  \"Equal (=)\",\n  \"Slash (/)\",\n  \"Www\",\n  \"Ratio digits URL\",\n  \"Ratio digits host\",\n  \"Tld in subdomain\",\n  \"(-) Prefix/suffix\",\n  \"Shortest word host\",\n  \"Longest words raw\",\n  \"Longest word path\",\n  \"Phish hints\",\n  \"Hyperlinks\",\n  \"Ratio internal hyperlinks\",\n  \"Empty title\",\n  \"Domain in title\",\n  \"Page rank\",\n];\n\nexport default function Home() {\n  const [url, setUrl] = useState<string>(\"\");\n  const [isShowDetail, setIsShowDetail] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n  const [prediction, setPrediction] = useState<{\n    phishingPercentage: number | null;\n    result: string;\n    url: string;\n    detail: any;\n  }>({\n    phishingPercentage: null,\n    result: \"\",\n    url: \"\",\n    detail: {},\n  });\n  const [search, setSearch] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(false);\n  const history = useHistory();\n  const dispatch = useAppDispatch();\n\n  const { post: getPredict } = useFetch(\"/predict\");\n\n  const getURL = useCallback(async () => {\n    const data = await sendMessage({ type: \"get_page_info\" });\n    setUrl(data.url || \"\");\n    setSearch(data.url || \"\");\n    dispatch(setSearchKey(data.url || \"\"));\n  }, [dispatch]);\n\n  const isNewTab = useMemo(() => url.includes(\"chrome://\"), [url]);\n\n  const phishingPercentage = useMemo(() => {\n    if (!isNumber(prediction.phishingPercentage)) return 0;\n    let result = 100 - prediction.phishingPercentage;\n    return Number(result.toFixed(0));\n  }, [prediction.phishingPercentage]);\n\n  const handlePredict = useCallback(\n    (url) => {\n      setLoading(true);\n      setError(\"\");\n      getPredict({ url })\n      .then((res) => {\n          if (!!res.message) {\n            setError(res.message);\n            setPrediction({\n              phishingPercentage: null,\n              result: \"\",\n              url: \"\",\n              detail: {},\n            });\n            return;\n          } else {\n            setPrediction(res.predictions[0]);\n          }\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    },\n    [getPredict]\n  );\n\n  useEffect(() => {\n    getURL();\n    if (!!url) {\n      handlePredict(url);\n    }\n  }, [getURL, handlePredict, url]);\n\n  if (isNewTab) return <Center>New tab</Center>;\n\n  return (\n    <Flex direction=\"column\">\n      <InputGroup>\n        <Input\n          background=\"#F7F7F7\"\n          value={search}\n          onChange={(e) => {\n            setSearch(e.target.value);\n            dispatch(setSearchKey(e.target.value));\n          }}\n          mx={4}\n          mt={4}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              handlePredict(search);\n            }\n          }}\n          placeholder=\"Insert URL to check\"\n        />\n        <InputRightElement\n          children={<SearchIcon />}\n          mt={4}\n          mr={4}\n          onClick={() => {\n            handlePredict(search);\n          }}\n          cursor=\"pointer\"\n        />\n      </InputGroup>\n      {!error && (\n        <Flex justify=\"center\" align=\"center\" my={3}>\n          <CircularProgress\n            value={phishingPercentage}\n            color={\n              phishingPercentage > 65\n                ? \"primary.200\"\n                : phishingPercentage > 45\n                ? \"orange.200\"\n                : \"red.800\"\n            }\n            size=\"135px\"\n            isIndeterminate={loading}\n          >\n            <CircularProgressLabel\n              fontSize=\"2xl\"\n              fontWeight=\"semibold\"\n              color={\n                phishingPercentage > 65\n                  ? \"primary.200\"\n                  : phishingPercentage > 45\n                  ? \"orange.200\"\n                  : \"red.800\"\n              }\n            >\n              {phishingPercentage}%\n            </CircularProgressLabel>\n          </CircularProgress>\n        </Flex>\n      )}\n      {!error && (\n        <Center mb={3} fontWeight=\"500\">\n          {prediction.result}\n        </Center>\n      )}\n      {!!error && (\n        <Center mb={3} fontWeight=\"500\" mt={2}>\n          {error}\n        </Center>\n      )}\n      {!isNewTab && (\n        <Flex mx={4} mb={3}>\n          <Button\n            w=\"full\"\n            h=\"45px\"\n            borderRadius=\"3px\"\n            background=\"#242424\"\n            color=\"white\"\n            fontWeight=\"semibold\"\n            _hover={{ background: \"#242424\" }}\n            onClick={() => {\n              history.push(\"/report\");\n            }}\n            disabled={!url && !search}\n          >\n            Report this website\n          </Button>\n        </Flex>\n      )}\n      <Flex mx={4}>\n        <Button\n          onClick={() => setIsShowDetail((prev) => !prev)}\n          w=\"full\"\n          h=\"45px\"\n          borderRadius=\"3px\"\n          background={isShowDetail ? \"transparent\" : \"primary.200\"}\n          color={isShowDetail ? \"primary.200\" : \"white\"}\n          fontWeight=\"semibold\"\n          _hover={\n            isShowDetail\n              ? { background: \"transparent\" }\n              : { background: \"primary.200\" }\n          }\n          border=\"2px solid\"\n          borderColor=\"primary.200\"\n          _focus={{\n            boxShadow: \"none\",\n            outline: \"none\",\n          }}\n          disabled={isEmpty(prediction.detail)}\n        >\n          Details\n        </Button>\n      </Flex>\n      {isShowDetail && prediction.detail && (\n        <Flex direction=\"column\" justify=\"center\" align=\"center\" mx={2} mt={2}>\n          <Flex wrap=\"wrap\" justify=\"center\">\n            <Text\n              background={\n                prediction.detail[\"length_url\"] < 54 ? \"primary.200\" : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[0]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"length_hostname\"] < 54\n                  ? \"primary.200\"\n                  : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[1]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"ip\"] === 0 ? \"primary.200\" : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[2]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"nb_dots\"] < 4 ? \"primary.200\" : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[3]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"nb_qm\"] < 3 ? \"primary.200\" : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[4]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"nb_eq\"] < 6 ? \"primary.200\" : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[5]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"nb_slash\"] < 10 ? \"primary.200\" : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[6]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"nb_www\"] < 2 ? \"primary.200\" : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[7]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"ratio_digits_url\"] < 0.65\n                  ? \"primary.200\"\n                  : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[8]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"ratio_digits_host\"] < 0.5\n                  ? \"primary.200\"\n                  : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[9]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"tld_in_subdomain\"] <= 0\n                  ? \"primary.200\"\n                  : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[10]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"prefix_suffix\"] <= 0\n                  ? \"primary.200\"\n                  : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[11]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"shortest_word_host\"] < 15\n                  ? \"primary.200\"\n                  : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[12]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"longest_words_raw\"] < 30\n                  ? \"primary.200\"\n                  : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[13]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"longest_word_path\"] < 10\n                  ? \"primary.200\"\n                  : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[14]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"phish_hints\"] < 10\n                  ? \"primary.200\"\n                  : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[15]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"nb_hyperlinks\"] < 30\n                  ? \"primary.200\"\n                  : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[16]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"ratio_intHyperlinks\"] > 0.4\n                  ? \"primary.200\"\n                  : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[17]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"empty_title\"] < 5 ? \"primary.200\" : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[18]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"domain_in_title\"] === 0\n                  ? \"primary.200\"\n                  : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[19]}\n            </Text>\n            <Text\n              background={\n                prediction.detail[\"page_rank\"] > 0 ? \"primary.200\" : \"red.800\"\n              }\n              mx={2}\n              my={1}\n              color=\"white\"\n              py={1}\n              px={2}\n              borderRadius=\"5px\"\n              fontSize=\"sm\"\n            >\n              {mappingCriteria[20]}\n            </Text>\n          </Flex>\n          <ChevronUpIcon\n            mt={1}\n            color=\"#979797\"\n            boxSize={5}\n            cursor=\"pointer\"\n            onClick={() => setIsShowDetail(false)}\n          />\n        </Flex>\n      )}\n    </Flex>\n  );\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from '../store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector"],"mappings":"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","sourceRoot":""}